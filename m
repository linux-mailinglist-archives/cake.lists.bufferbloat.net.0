Return-Path: <cake-bounces@lists.bufferbloat.net>
X-Original-To: lists+cake@lfdr.de
Delivered-To: lists+cake@lfdr.de
Received: from lists.bufferbloat.net (lists.bufferbloat.net [IPv6:2600:3c03:e000:3ca:f00f:f00f:b33b:b33b])
	by mail.lfdr.de (Postfix) with ESMTPS id 1973462BC5F
	for <lists+cake@lfdr.de>; Wed, 16 Nov 2022 12:47:03 +0100 (CET)
Received: from pitt.bufferbloat.net (localhost [127.0.0.1])
	by lists.bufferbloat.net (Postfix) with ESMTP id B1A8E3CB48;
	Wed, 16 Nov 2022 06:47:01 -0500 (EST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
	d=lists.bufferbloat.net; s=201610; t=1668599221;
	bh=OI2ZdsfHrwKNscyLgbx7HECC/Q3VGhTJWXCk0tiaeZI=;
	h=In-Reply-To:Date:References:To:Subject:List-Id:List-Unsubscribe:
	 List-Archive:List-Post:List-Help:List-Subscribe:From:Reply-To:Cc:
	 From;
	b=OzzS574gO2XelojHxwzPX2zJUitXuOFXK+pCG1dLD9O/aYIFDclRCKOyDyEGfP7Cs
	 PQeHLx++Au/I2ouQwcnzi6X0szTbtxgV+7njz0w4OkpKlKY1rXjKxk6zBXKAeI5AyO
	 E5jE/ND/4DmtIVsbagTwdh5Won7kF7q1xHdTVMcxgX89Ah60ROjKKmEWAQgHYx3mmb
	 heufWVwgMG/heoxz+rH2iZBvjHsbrVPXpt9PzGiH4SDajh7rnh9GkSIC5ZEG3G8s9E
	 DO7u8wFTweO6d1MXf7MTsqVAW5NiRaXnndz8+lMxKqbqPvb/YXNfGWT8OyMeKpMH/U
	 EIPB5d+2bsxcQ==
X-Original-To: cake@lists.bufferbloat.net
Delivered-To: cake@lists.bufferbloat.net
Received: from vps.slashdirt.org (vps.slashdirt.org [144.91.108.218])
 (using TLSv1.2 with cipher ADH-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by lists.bufferbloat.net (Postfix) with ESMTPS id 7BF483B29E
 for <cake@lists.bufferbloat.net>; Wed, 16 Nov 2022 06:46:59 -0500 (EST)
Received: from smtpclient.apple (tardis.herebedragons.eu [171.22.3.161])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by vps.slashdirt.org (Postfix) with ESMTPSA id 73B6A6014B;
 Wed, 16 Nov 2022 12:46:57 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 vps.slashdirt.org 73B6A6014B
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=slashdirt.org; s=mail;
 t=1668599218; bh=Zp6Gv7GVQZW7m97lYvMNOye7zQQ9Ji4VRM0AW8nvxvY=;
 h=Subject:From:In-Reply-To:Date:Cc:References:To:From;
 b=TEAykFUeDpdIRJPWJO2LvHiTC42hFqlN7xFzMcQHYL9joqb4emQwpr/fy3z2edghV
 pXUYH8KzxKI+upATOL8Jj6yrO6LwmcZ2/C524QSxVUkqIR2yVOFzzs9I6oklnofhzz
 0AYVC6fV2qoedx5lu7jEIkquW9MbtBOtIYjK+onE=
Mime-Version: 1.0 (Mac OS X Mail 16.0 \(3696.120.41.1.1\))
In-Reply-To: <F2D11ACD-9A4E-43E5-A7FE-B7CE27581434@gmx.de>
Date: Wed, 16 Nov 2022 12:46:56 +0100
Message-Id: <4CF53FE3-D26A-4E32-8378-3B27BBB70AEF@slashdirt.org>
References: <386F2ED9-3D39-4A42-8982-742B5D4B417F@slashdirt.org>
 <F2D11ACD-9A4E-43E5-A7FE-B7CE27581434@gmx.de>
To: Sebastian Moeller <moeller0@gmx.de>
X-Mailer: Apple Mail (2.3696.120.41.1.1)
Subject: Re: [Cake] Help untangling CAKE settings for FTTH
X-BeenThere: cake@lists.bufferbloat.net
X-Mailman-Version: 2.1.20
Precedence: list
List-Id: Cake - FQ_codel the next generation <cake.lists.bufferbloat.net>
List-Unsubscribe: <https://lists.bufferbloat.net/options/cake>,
 <mailto:cake-request@lists.bufferbloat.net?subject=unsubscribe>
List-Archive: <https://lists.bufferbloat.net/pipermail/cake>
List-Post: <mailto:cake@lists.bufferbloat.net>
List-Help: <mailto:cake-request@lists.bufferbloat.net?subject=help>
List-Subscribe: <https://lists.bufferbloat.net/listinfo/cake>,
 <mailto:cake-request@lists.bufferbloat.net?subject=subscribe>
From: Thibaut via Cake <cake@lists.bufferbloat.net>
Reply-To: Thibaut <hacks@slashdirt.org>
Cc: Cake List <cake@lists.bufferbloat.net>,
 openwrt-devel <openwrt-devel@lists.openwrt.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: cake-bounces@lists.bufferbloat.net
Sender: "Cake" <cake-bounces@lists.bufferbloat.net>

SGkgU2ViYXN0aWFuLAoKVGhhbmtzIGZvciB5b3VyIHJlcGx5LgoKPiBMZSAxNiBub3YuIDIwMjIg
w6AgMTE6NDksIFNlYmFzdGlhbiBNb2VsbGVyIDxtb2VsbGVyMEBnbXguZGU+IGEgw6ljcml0IDoK
PiAKPiBISSBULgo+IAo+IAo+IAo+PiBPbiBOb3YgMTYsIDIwMjIsIGF0IDExOjIyLCBUaGliYXV0
IDxoYWNrc0BzbGFzaGRpcnQub3JnPiB3cm90ZToKPj4gCj4+IEhpLAo+PiAKPj4gQSBmZXcgcXVl
c3Rpb25zIGZvciB0aGUgQ0FLRSBleHBlcnRzIGhlcmU6Cj4gCj4gCVF1aWNrIG5vdGUsIHRoaXMg
aXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBiZXN0IHBsYWNlIHRvIGdldCBhZHZpY2Ugb24gY2FrZSwg
Ym90aCB0aGUgY2FrZSBtYWlsaW5nIGxpc3QgYW5kIHRoZSBPcGVuV3J0IGZvcnVtIHRlbmQgdG8g
YmUgZGlyZWN0ZXIgcGF0aHMgdG8gdGhlICJiYWtlcnMiLgoKV2VsbCBzaW5jZSB0aGlzIGxvb2tl
ZCB0byBtZSBsaWtlIGFuIG9wZW53cnQtc3BlY2lmaWMgcXVlc3Rpb24gKHdpdGggbGlua3MgdG8g
b3BlbndydCB3aWtpKSwgaXQgZmVsdCBtb3JlIGFkZXF1YXRlIHRvIGFzayBoZXJlLCBidXQgdGhh
bmtzIGZvciByZWRpcmVjdGluZy4KCj4+IEnigJltIHRyeWluZyB0byB1bnRhbmdsZSB0aGUgaW5m
b3JtYXRpb24gYXZhaWxhYmxlIGluIHRoZSBvcGVud3J0IHdpa2k6Cj4+IGh0dHBzOi8vb3Blbndy
dC5vcmcvZG9jcy9ndWlkZS11c2VyL25ldHdvcmsvdHJhZmZpYy1zaGFwaW5nL3NxbQo+PiBodHRw
czovL29wZW53cnQub3JnL2RvY3MvZ3VpZGUtdXNlci9uZXR3b3JrL3RyYWZmaWMtc2hhcGluZy9z
cW0tZGV0YWlscwo+PiBhbmQgZm9yIHRoZSBsYXR0ZXIgZXNwZWNpYWxseSB0aGUgcGFydCBoZXJl
OiBodHRwczovL29wZW53cnQub3JnL2RvY3MvZ3VpZGUtdXNlci9uZXR3b3JrL3RyYWZmaWMtc2hh
cGluZy9zcW0tZGV0YWlscyNzcW1saW5rX2xheWVyX2FkYXB0YXRpb25fdGFiCj4+IAo+PiBGb3Ig
QURTTC9WRFNMLCBJIGJlbGlldmUgdGhlIGluc3RydWN0aW9ucyBhcmUgY2xlYXIgYW5kIHRoZSBM
dWNpIGludGVyZmFjZSBpcyB0b28uIEhvd2V2ZXIgZm9yIGV0aGVybmV0L2ZpYmVyLCBJ4oCZbSBj
b25mdXNlZDoKPj4gCj4+IEluIHRoZSBmaXJzdCBsaXN0IG9mIHRoaXMgcGFyYWdyYXBoIGl0IGlz
IGZpcnN0IHN1Z2dlc3RlZCB0byB1c2UgwqsgRXRoZXJuZXQgd2l0aCBvdmVyaGVhZCDCuyBhbmQg
c2V0IHRoZSBwZXItcGFja2V0IG92ZXJoZWFkIHRvIDQ0IGZvciBGRlRIICh3aGljaCBzZWVtcyBs
aWtlIGEgbGFyZ2UgdmFsdWUgZm9yIHRoaXMgdXNlIGNhc2UpLAo+IAo+IFRoYXQgaXMgdGhlIHBv
aW50IGhlcmUsIDQ0IGlzIGEgdmFsdWUgdGhhdCBpbiBhbGwgbGlrZWxpaG9vZCBpcyA+PSBhbnkg
cmVhbGlzdGljIHRydWUgb3ZlcmhlYWQuIEdlbnRseSBvdmVyLWVzdGltYXRpbmcgdGhlIHRydWUg
b3ZlcmhlYWQgaGFzIGEgcmVsYXRpdmUgc21hbGwgY29zdCBpbiBwb3RlbnRpYWwgdGhyb3VnaHB1
dCwgdW5kZXJlc3RpbWF0aW5nIHRoZSBvdmVyaGVhZCBob3dldmVyIGNhbiByZXN1bHQgaW4gbm90
aWNlYWJsZSBkZWdyYWRhdGlvbiBvZiByZXNwb25zaXZlbmVzcyB1bmRlciB3b3JraW5nIGNvbmRp
dGlvbnMsIHNvIHRoZSByZWNvbW1lbmRhdGlvbiBpcyB0byByYXRoZXIgZXJyIG9uIHRoZSBzaWRl
IG9mIHRvbyBsYXJnZSBhbiBvdmVyaGVhZCBhbmQgbm90IHRvbyBzbWFsbCBhbiBvdmVyaGVhZC4K
PiBXaHkgbm90IHNpbXBseSByZWNvbW1lbmQgdGhlIHdvcnN0IGNhc2Ugc2NlbmFyaW8gYG92ZXJo
ZWFkIDQ0IGF0bWAgdG8gYmUgb24gdGhlIHNhZmUgc2lkZSBvbiBhbGwgbGlua3M/IEJlY2F1c2Ug
dGhlIEFUTS9BQUw1IGVuY2Fwc3VsYXRpb24gaXMgb25seSB1c2VkIG9uIEFEU0wgbGlua3MgKHNv
IGlzIGdldHRpbmcgcmFyZXIgYW5kIHJhcmVyIGFuZCB0aGUgQVRNIGVuY2Fwc3VsYXRpb24gcmVz
dWx0cyBpbiBhID49OSUgdGhyb3VnaHB1dCByZWR1Y3Rpb24gb24gbm9uLUFUTSBsaW5rcywgd2hp
Y2ggaXMgSU1ITyB0b28gc3RlZXAgYSBwcmljZS4uLiBwbHVzIHRoZSBBVE0vQUFMNSBlbmNhcHN1
bGF0aW9uIHNpemUgaW4gYWRkaXRpb24gYWxzbyBkZXBlbmRzIG9uIHRoZSBwYWNrZXQgc2l6ZSBz
byBub3QgYSByZWFzb25hYmxlIGRlZmF1bHQgaW4gYSB3b3JsZCB3aGVyZSBBVE0tdXNhZ2UgaXMg
b24gdGhlIHdheSBvdXQuCgpJIGhlYXIgeW91ciBhcmd1bWVudCwgaG93ZXZlciB0aGUgcG9pbnQg
aGVyZSBpcyB0aGF0IGVpdGhlciB3ZSBvZmZlciBhIMKrIHNpbmdsZSBjbGljayDCuyBzb2x1dGlv
biwgYW5kIHRoZW4gd2Ugc2hvdWxkbuKAmXQgZXZlbiBib3RoZXIgYWxsb3dpbmcgdG8gdHdlYWsg
dGhlIDQ0IHNldHRpbmcgYnkgZGVmYXVsdCwgb3Igd2UgYWxsb3cgY3VzdG9taXppbmcgdGhpcyB2
YWx1ZSBhbmQgdGhlbiBpdCBzZWVtcyBsb2dpY2FsIHRvIG9mZmVyIHByZWNpc2UgZ3VpZGFuY2Ug
b24gaG93IHRvIGRvIHNvLCBlc3BlY2lhbGx5IGluIHRoZSDCqyBkZXRhaWxlZCDCuyBzZWN0aW9u
IG9mIHRoZSB3aWtpLgoKQ3VycmVudGx5IHdlIGFjaGlldmUgbmVpdGhlciBJTUhPLCBoZW5jZSBt
eSBpbml0aWFsIGVtYWlsIDopCgo+PiB0aGVuIGxhdGVyIGluIHRoZSBzZWNvbmQgbGlzdCAowqsg
dGhlIGRldGFpbHMgwrspLCBpdCBpcyBzdWdnZXN0ZWQgdG8gdXNlIMKrIE5vbmUgwrssIGRpcmVj
dGx5IGNvbnRyYWRpY3RpbmcgdGhlIGFib3ZlLgo+IAo+IEFyZSB5b3UgcmVmZXJyaW5nIHRvOgo+
IAo+IAnigKIgTm9uZTogRmliZXIsIGFuZCBkaXJlY3QgRXRoZXJuZXQgY29ubmVjdGlvbnMgZ2Vu
ZXJhbGx5IGRvIG5vdCBuZWVkIGFueSBraW5kIG9mIGxpbmsgbGF5ZXIgYWRhcHRhdGlvbi4gV2Vs
bCwgSSBhbSBraWRkaW5nLCBhbGwgc2hhcGluZyBiZWxvdyB0aGUgcGh5c2ljYWwgZ3Jvc3MtcmF0
ZSByZXF1aXJlcyBjb3JyZWN0IHBlci1wYWNrZXQgb3ZlcmhlYWQgYWNjb3VudGluZywgYnV0IGZv
ciBmaWJlciBhbmQgZXRoZXJuZXQgaXQgaXMgbXVjaCBoYXJkZXIgdG8gZmlndXJlIG91dCB0aGUg
ZXhhY3Qgb3ZlcmhlYWQgdG8gc3BlY2lmeeKApiAodGhlIHF1ZXN0aW9uIGlzIHR5cGljYWxseSBo
b3cgaXMgdGhlIElTUCdzIHVwc3RyZWFtIHRyYWZmaWMgc2hhcGVyIGNvbmZpZ3VyZWQpLiBGb3Ig
dHJ1ZSBldGhlcm5ldCBzaGFwaW5nIHdpdGhvdXQgVkxBTnMgc3BlY2lmeSAzOCBieXRlcyAobXB1
IDg0KS4KPiAKPiBJIHdhcyB1bmRlciB0aGUgaW1wcmVzc2lvbiB0aGF0IHRoZSAiV2VsbCwgSSBh
bSBraWRkdW5nIiBwYXJ0IHdhcyBjbGVhciBlbm91Z2gsIG5vPwoKSXQgd2FzbuKAmXQgdG8gbWUu
IEFuZCBJIGRvbuKAmXQgdGhpbmsgdGhhdCDCqyBqb2tlcyDCuyBzaG91bGQgYmUgcGFydCBvZiBh
IHRlY2huaWNhbCBleHBsYW5hdGlvbiB0aGF0IG1heSBiZSByZWFkIGJ5IG5vbi1uYXRpdmUgc3Bl
YWtlcnMgKGxpa2UgbXlzZWxmKTogaXTigJlzIGxpa2VseSB0byBjYXVzZSBjb25mdXNpb24gKGFz
IGl0IGRpZCBmb3IgbWUpLgoKU28gSeKAmWxsIHRyeSB0byBlZGl0IHRoaXMgc2VjdGlvbiB0byBt
b3ZlIHRoZSByZWxldmFudCBpbmZvcm1hdGlvbiBiYWNrIHdoZXJlIGl0IGJlbG9uZ3MuCgo+PiBU
aGUgNDQgYnl0ZSBvdmVyaGVhZCBmb3IgZXRoZXJuZXQvRlRUSCBpcyBhbHNvIG1lbnRpb25lZCBo
ZXJlOiBodHRwczovL29wZW53cnQub3JnL2RvY3MvZ3VpZGUtdXNlci9uZXR3b3JrL3RyYWZmaWMt
c2hhcGluZy9zcW0KPj4gCj4+IE1vcmUgc3BlY2lmaWNhbGx5LCB0aGVyZSBhcmUgdHdvIChpbmNy
ZWFzaW5nbHkgY29tbW9uIEkgdGhpbmspIHVzZSBjYXNlcyBJIHdvdWxkIGxpa2UgdG8gZG9jdW1l
bnQgd2l0aCB5b3VyIGhlbHA6Cj4+IAo+PiAtIEZUVEggd2l0aCBwbGFpbiBESENQLCBubyBWTEFO
Cj4+IC0gRlRUSCB3aXRoIFBQUG9FLCBubyBWTEFOCj4+IChBbmQgYWRkaW5nIGEgZm9vdG5vdGUg
Zm9yIHRoZSBleHRyYSBvdmVyaGVhZCB0byBjb25zaWRlciBpZiB0aGUgYWJvdmUgaW5jbHVkZSBh
IFZMQU4gdGFnKQo+IAo+IAlJIGFtIHdpdGggeW91LCBJIHdvdWxkIGxpa2UgdG8gaGF2ZSB0aGVz
ZSBzZXR0bGVkIGFzIHdlbGwsIGJ1dCBhbGFzIEZUVEggaXMgbm90IHRlcnJpYmx5IHdlbGwgZGVm
aW5lZCBhcyBhIHRlY2hub2xvZ3kuIEZvciBhY3RpdmUgb3B0aWNhbCBuZXR3b3JrcyB0aGUgZW5j
YXBzdWxhdGlvbiBpcyBsaWtlbHkgZXRoZXJuZXQgZnJhbWluZywgYnV0IGZvciBQT05zIGxpa2Ug
R1BPTiBhbmQgWEdTLVBPTiBpdCBpcyBmYXIgbGVzcyBjbGVhciB3aGF0IG5lZWRzIHRvIGJlIGFj
Y291bnRlZCBmb3IuIFllcyB3aXRoIFBPTiBsYXJnZSBwYXJ0cyBvZiB0aGUgZXRoZXJuZXQgZnJh
bWluZyBvdmVyaGVhZCBhcmUgcmVwbGFjZWQgYnkgYSBzbWFsbGVyIEdFTSBoZWFkZXIsIGJ1dCBo
b3cgdG8gYWNjb3VudCBmb3IgdGhlIHJlcXVlc3QtZ3JhbnQgdHJhZmZpYyBhbmQgc3R1ZmYuLi4K
PiAJVGhlIGdvb2QgdGhpbmcgaXMgdGhhdCBnZW50bHkgb3Zlci1lc3RpbWF0aW5nIHRoZSBwZXIt
cGFja2V0IG92ZXJoZWFkIG9ubHkgbGVhZHMgdG8gYSByZWxhdGl2ZSBzbWFsbCByZWR1Y3Rpb24g
aW4gbWF4aW1hbCB0aGVvcmV0aWNhbCB0aHJvdWdocHV0LCBzbyBgb3ZlcmhlYWQgNDRgIGlzIHN0
aWxsIGEgZGVjZW50IHJlY29tbWVuZGF0aW9uIGV2ZW4gZm9yIEZUVEguCgpIbW0gb2suCgo+PiBJ
biB0aGUgbGF0dGVyIGNhc2UgKEZUVEggd2l0aCBQUFBvRSksIGFub3RoZXIgcG9pbnQgdGhhdCBu
ZWVkcyB0byBiZSBjbGFyaWZpZWQgaXM6IGRvIHdlIGFwcGx5IENBS0UgdG8gdGhlIGV0aGVybmV0
IGludGVyZmFjZSwgb3IgdG8gdGhlIFBQUCBpbnRlcmZhY2U/Cj4gCj4gCVRoYXQgaXMgeW91ciBj
aG9pY2UuLi4KCldlbGwgSSBkb27igJl0IHJlYWxseSBjYXJlIHRvIGNob29zZSAoYW5kIEkgc3Vz
cGVjdCBhIGxvdCBvZiB1c2VycyBkb27igJl0IGVpdGhlciksIGV4Y2VwdCBmb3IgdGhlIG1vc3Qg
cmVsZXZhbnQvZWZmaWNpZW50IGNob2ljZSBpZiB0aGVyZSBpcyBvbmU6IHdoaWNoIHdvdWxkIHRo
YXQgYmU/IDopCkluIGFueSBjYXNlIEkgc3VzcGVjdCB0aGlzIGlzIGEgRkFRIHRoYXQgc2hvdWxk
IGJlIGFkZHJlc3NlZCwgZXZlbiBpZiB3aXRoIGEgc2ltcGxlIMKrIGl0IGRvZXNu4oCZdCBtYXR0
ZXIgwrsuCgo+PiAoYW5kIEkgYXNzdW1lIHRoYXQgZGVwZW5kaW5nIG9uIHRoZSBhbnN3ZXIsIHRo
ZSBvdmVyaGVhZCBzZXR0aW5ncyB3aWxsIGhhdmUgdG8gYmUgYWRqdXN0ZWQpLgo+IAo+IAlJdCB1
c2VkIHRvIHllcywgYnV0IGNha2UgaXMgc21hcnQgZW5vdWdoIHRvIGdldCB0aGUgc2l6ZSBvZiB0
aGUgSVAgcGFja2V0IGFuZCBhZGQgdGhlIG92ZXJoZWFkIG9uIHRvcCBvZiB0aGF0LCBzbyB0aGUg
b3ZlcmhlYWQgd2lsbCBub3QgZGVwZW5kIG9uIHdoZXRoZXIgeW91IGluc3RhbnRpYXRlIGNha2Ug
b24gc2F5IGV0aDAgb3Igb24gcHBwb2Utd2FuIChhc3N1bWluZyBwcHBvZS13YW4gdXNlcyBldGgw
KS4gSE9XRVZFUiBmb3Igc2ltcGxlLnFvcyBhbmQgc2ltcGxlc3QucW9zIGl0IGFnYWluIG1hdHRl
cnMuLi4KCkNvdWxkIHlvdSBlbGFib3JhdGU/IEnigJlsbCB0cnkgdG8gaW50ZWdyYXRlIHlvdXIg
Y29tbWVudHMgaW4gbXkgdXBkYXRlIHRvIHRoZSB3aWtpLCB3aXRoIHlvdXIgcGVybWlzc2lvbi4K
Cj4+IEFsc28gaW4gdGhhdCBjYXNlLCB3aGF0IGFib3V0IElTUHMgdGhhdCBhbGxvdyBzZW5kaW5n
IGEgZnVsbCAxNTAwIGZyYW1lIG92ZXIgUFBQb0UgKHVzaW5nIDE1MDggTVRVIG9uIHRoZSB1bmRl
cmx5aW5nIGV0aGVybmV0IGludGVyZmFjZSk/Cj4gCj4gCVNRTSB3aXRoIGNha2UgZG9lcyBub3Qg
Y2FyZSBhYm91dCB0aGF0LCBpdCBzZWVzIHRoZSBJUCBwYWNrZXQgc2l6ZSBhbmQgYWRkcyB0aGUg
Y29uZmlndXJlZCBvdmVyaGVhZC4gVGhhdCB3YXQgY2FrZSBhbHNvIGhhcyBubyBpc3N1ZSB3aXRo
IEdSTy9HU08gbWV0YSBwYWNrZXRzIHdoaWNoIGNhbiBiZSB1cCB0byA2NEtCIGluIHNpemUgYWJk
IHN0aWxsIGdldCBhY2NvdW50ZWQgZm9yIGNvcnJlY3RseS4gQmFieS1qdW1ibyBmcmFtZXMgZnJv
bSB0aGF0IHBlcnNwZWN0aXZlIHNpbXBseSByZXN1bHQgaW4gSVAgcGFja2V0IHNpemVzID4gMTQ5
Mi4gCgpPSywgdW5kZXJzdG9vZC4KClRoYW5rcyBhZ2FpbiwKVGhpYmF1dApfX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpDYWtlIG1haWxpbmcgbGlzdApDYWtl
QGxpc3RzLmJ1ZmZlcmJsb2F0Lm5ldApodHRwczovL2xpc3RzLmJ1ZmZlcmJsb2F0Lm5ldC9saXN0
aW5mby9jYWtlCg==
